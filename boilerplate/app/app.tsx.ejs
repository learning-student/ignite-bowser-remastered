/**
 * Welcome to the main entry point of the app. In this file, we'll
 * be kicking off our app or storybook.
 *
 * Most of this file is boilerplate and you shouldn't need to modify
 * it very often. But take some time to look through and understand
 * what is going on here.
 *
 * The app navigation resides in ./app/navigation, so head over there
 * if you're interested in adding screens and navigators.
 */
import "./i18n"
import "./utils/ignore-warnings"
import React, { useState, useEffect, useRef, FunctionComponent as Component } from "react"
import { NavigationContainerRef } from "@react-navigation/native"
import { SafeAreaProvider, initialWindowSafeAreaInsets } from "react-native-safe-area-context"
<% if (props.useExpo) { -%>
  import { initFonts } from "./theme/fonts"
<% } -%>
import * as storage from "./utils/storage"
import {
  useBackButtonHandler,
  RootNavigator,
  canExit,
  setRootNavigation,
  useNavigationPersistence,
} from "./navigation"

<% if (props.useMobx) { %>
import { RootStore, RootStoreProvider, setupRootStore } from "./models"
<% } -%>
// lets import theme
import {theme} from './theme'

<% if (props.useRedux) { -%>
import { Provider } from 'react-redux'
import createStore from '../Redux'
<% } -%>
// This puts screens in a native ViewController or Activity. If you want fully native
// stack navigation, use `createNativeStackNavigator` in place of `createStackNavigator`:
// https://github.com/kmagiera/react-native-screens#using-native-stack-navigator
import { enableScreens } from 'react-native-screens';
<% if (props.usePaper) { -%>

// we will use react-native-paper as default theme
import { Provider as PaperProvider } from 'react-native-paper';
<% } -%>
enableScreens()

export const NAVIGATION_PERSISTENCE_KEY = "NAVIGATION_STATE"
<% if (props.useRedux) { -%>
    const store = createStore()
<% } -%>
/**
 * This is the root component of our app.
 */
const App: Component<{}> = () => {
  const navigationRef = useRef<NavigationContainerRef>()
  <% if (props.useMobx) { -%>
  const [rootStore, setRootStore] = useState<RootStore | undefined>(undefined)
  <% } -%>


  setRootNavigation(navigationRef)
  useBackButtonHandler(navigationRef, canExit)
  const { initialNavigationState, onNavigationStateChange } = useNavigationPersistence(
    storage,
    NAVIGATION_PERSISTENCE_KEY,
  )



  // Kick off initial async loading actions, like loading fonts and RootStore
  useEffect(() => {
<% if (props.useMobx) { -%>
    (async () => {
      setupRootStore().then(setRootStore)
    })()
<% } -%>
<% if (props.useGoogleAuth && (props.googleId !== "" )) { -%>
    GoogleSignin.configure({
      scopes: ['email', 'profile'], // what API you want to access on behalf of the user, default is email and profile
      webClientId: '<%= props.googleId %>', // client ID of type WEB for your server (needed to verify user ID and offline access)
      offlineAccess: true
    });
<% } %>

<% if (props.useOnesignal) { -%>
    OneSignal.init("<%= props.oneSignalId %>", {kOSSettingsKeyAutoPrompt : false, kOSSettingsKeyInAppLaunchURL: false, kOSSettingsKeyInFocusDisplayOption:2});
    OneSignal.inFocusDisplaying(2); // Controls what should happen if a notification is received while the app is open. 2 means that the notification will go directly to the device's notification center.
<% } %>
   }, [])
<% if (props.useMobx) { -%>
  // Before we show the app, we have to wait for our state to be ready.
  // In the meantime, don't render anything. This will be the background
  // color set in native by rootView's background color. You can replace
  // with your own loading component if you wish.
  if (!rootStore) return null
 <% } -%>
  // otherwise, we're ready to render the app
  return (
<ThemeProvider theme={theme}>
<% if (props.usePaper) { -%>
   <PaperProvider theme={theme}>
<% } %>
 <% if (props.useMobx) { -%>
    <RootStoreProvider value={rootStore}>
<% }else if(props.useRedux){ -%>
    <Provider store={store}>
<% } %>
      <SafeAreaProvider initialSafeAreaInsets={initialWindowSafeAreaInsets}>
        <RootNavigator
          ref={navigationRef}
          initialState={initialNavigationState}
          onStateChange={onNavigationStateChange}
        />
      </SafeAreaProvider>
<% if (props.useMobx) { -%>
    </RootStoreProvider>
<% }else if(props.useRedux){ -%>
    </Provider>
<% } %>
<% if (props.usePaper) { -%>
  </PaperProvider>
 <% } %>
 </ThemeProvider>
        )
}

export default App
