<% if (props.useGoogleAuth){%>
import {GoogleSignin, statusCodes} from '@react-native-community/google-signin';
<% } %>
<% if (props.useGoogleAuth){%>
import appleAuth, {
    AppleAuthRequestOperation,
    AppleAuthRequestScope,
    AppleAuthCredentialState,
} from '@invertase/react-native-apple-authentication';
<% } %>

<% if (props.useFacebookAuth){%>
const FBSDK = require('react-native-fbsdk');
const {LoginManager,AccessToken,} = FBSDK;
<% } %>

<% if (props.useGoogleAuth){%>
    export let googleSignin = async () :  Promise<boolean>  =>  {
        try {
            await GoogleSignin.hasPlayServices();
            const userInfo = await GoogleSignin.signIn();

        return true;
        } catch (error) {
            console.log(error);
            if (error.code === statusCodes.SIGN_IN_CANCELLED) {
                // user cancelled the login flow
            } else if (error.code === statusCodes.IN_PROGRESS) {
                // operation (e.g. sign in) is in progress already
            } else if (error.code === statusCodes.PLAY_SERVICES_NOT_AVAILABLE) {
                // play services not available or outdated
            } else {
                // some other error happened
            }
        return false;
        }
    };

<% } %>


<% if (props.useFacebookAuth){%>
export let facebookSignin = async ()  : Promise<boolean> => {
try {
    let result = await LoginManager.logInWithPermissions(['email', 'public_profile']);
    if (result.isCancelled) {
        return false;
     }
     let facebookToken = await AccessToken.getCurrentAccessToken();
     if (!facebookToken) {
        return false;
     }

     return true;
     } catch (e) {
        return false;
     }
};
<% } %>


<% if (props.useAppleAuth){%>
export let appleSignin = async (slient: boolean = true)  Promise<boolean> => {
    try {
        let identityToken = '';

        // performs login request
        const appleAuthRequestResponse = await appleAuth.performRequest({
            requestedOperation: AppleAuthRequestOperation.LOGIN,
            requestedScopes: [AppleAuthRequestScope.EMAIL, AppleAuthRequestScope.FULL_NAME],
        });

        // get current authentication state for user
        // /!\ This method must be tested on a real device. On the iOS simulator it always throws an error.
        const credentialState = await appleAuth.getCredentialStateForUser(appleAuthRequestResponse.user);

        // use credentialState response to ensure the user is authenticated
        if (credentialState === AppleAuthCredentialState.AUTHORIZED) {
            identityToken = appleAuthRequestResponse.identityToken;
        }

        return true;
    } catch (e) {
        return false;
    }

};
<% } %>
